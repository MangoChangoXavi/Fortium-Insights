// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model onboard {
  id        String   @id @default(cuid())
  links     String
  intro     String
  services  String
  problems  String
  success   String
  budget    String
  status    String   @default("initial")
  createdAt DateTime @default(now()) @map("created_at")
}

model client {
  id          String    @id @default(cuid())
  name        String
  company     String
  role        String
  phone       String?
  location    String
  linkedIn    String?
  notes       String?
  status      String    @default("initial") // Initial, Contacted, Proposal, Contract, Completed
  nextMeeting DateTime? @default(now()) @map("next_meeting")
  createdAt   DateTime  @default(now()) @map("created_at")
}

model acmResultDetail {
  id                  String   @id @default(cuid())
  lat                 Decimal  @default(0)
  lng                 Decimal  @default(0)
  price               Decimal  @default(0)
  numberOfRooms       Int      @default(0)
  numberOfBathrooms   Int      @default(0)
  numberOfParkingLots Int      @default(0)
  totalArea           Int      @default(0)
  buildingType        String   @default("")
  url                 String   @default("")
  currency            String   @default("USD")
  address             String   @default("")
  createdAt           DateTime @default(now()) @map("created_at")
  acm                 acm      @relation(fields: [acmId], references: [id])
  acmId               String

  @@index([acmId])
}

model acmResultSummary {
  id       String  @id @default(cuid())
  location String
  count    Int
  mean     Decimal @default(0)
  std      Decimal @default(0)
  minValue Decimal
  maxValue Decimal
  acm      acm     @relation(fields: [acmId], references: [id])
  acmId    String

  @@index([acmId])
}

model acm {
  id                  String             @id @default(cuid())
  address             String
  lat                 Decimal            @default(0)
  lng                 Decimal            @default(0)
  radius              Decimal            @default(0)
  operationType       String // Buy, Rent
  buildingType        String // Apartment, House, Office, Warehouse
  numberOfRooms       Int?               @default(0)
  numberOfBathrooms   Int?               @default(0)
  numberOfParkingLots Int?               @default(0)
  totalArea           Int?               @default(0)
  createdAt           DateTime           @default(now()) @map("created_at")
  expectedPrice       Decimal            @default(0)
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  acmResultSummary    acmResultSummary[]
  acmResultDetail     acmResultDetail[]
}

model proposalService {
  id          String   @id @default(cuid())
  title       String
  description String
  proposalId  String
  proposal    proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}

model proposal {
  id                      String   @id @default(cuid())
  identifier              String   @unique
  title                   String
  client                  String
  status                  String   @default("initial") // Initial, Sent, Accepted, Rejected
  createdAt               DateTime @default(now()) @map("created_at")
  paymentLink             String   @default("none") @map("payment_link")
  concurrentPaymentAmount String?  @default("") @map("concurrent_payment_amount")

  proposalServices proposalService[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("disabled")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  acm           acm[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
